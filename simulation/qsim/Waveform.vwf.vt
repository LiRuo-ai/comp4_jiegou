// Copyright (C) 2016  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/14/2021 16:50:56"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          comp4_jiegou
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module comp4_jiegou_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a;
reg [3:0] b;
reg [3:0] c;
reg [3:0] d;
// wires                                               
wire [3:0] max;
wire [3:0] min;

// assign statements (if any)                          
comp4_jiegou i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.c(c),
	.d(d),
	.max(max),
	.min(min)
);
initial 
begin 
#1000000 $finish;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	# 60000;
	repeat(5)
	begin
		a[3] = 1'b1;
		a[3] = #80000 1'b0;
		# 80000;
	end
	a[3] = 1'b1;
	a[3] = #80000 1'b0;
end 
// a[ 2 ]
initial
begin
	a[2] = 1'b0;
	# 20000;
	repeat(12)
	begin
		a[2] = 1'b1;
		a[2] = #40000 1'b0;
		# 40000;
	end
	a[2] = 1'b1;
end 
// a[ 1 ]
always
begin
	a[1] = 1'b1;
	a[1] = #20000 1'b0;
	#20000;
end 
// a[ 0 ]
always
begin
	a[0] = 1'b0;
	a[0] = #10000 1'b1;
	#10000;
end 
// b[ 3 ]
initial
begin
	repeat(6)
	begin
		b[3] = 1'b1;
		b[3] = #80000 1'b0;
		# 80000;
	end
	b[3] = 1'b1;
end 
// b[ 2 ]
initial
begin
	repeat(12)
	begin
		b[2] = 1'b0;
		b[2] = #40000 1'b1;
		# 40000;
	end
	b[2] = 1'b0;
end 
// b[ 1 ]
always
begin
	b[1] = 1'b0;
	b[1] = #20000 1'b1;
	#20000;
end 
// b[ 0 ]
initial
begin
	b[0] = 1'b0;
end 
// c[ 3 ]
initial
begin
	repeat(2)
	begin
		c[3] = 1'b1;
		c[3] = #30000 1'b0;
		# 60000;
	end
	repeat(2)
	begin
		c[3] = 1'b1;
		c[3] = #60000 1'b0;
		# 30000;
	end
	c[3] = 1'b1;
	# 60000;
	repeat(2)
	begin
		c[3] = 1'b0;
		c[3] = #60000 1'b1;
		# 30000;
	end
	c[3] = 1'b0;
	# 60000;
	repeat(2)
	begin
		c[3] = 1'b1;
		c[3] = #60000 1'b0;
		# 30000;
	end
	c[3] = 1'b1;
	c[3] = #60000 1'b0;
	c[3] = #60000 1'b1;
	c[3] = #30000 1'b0;
end 
// c[ 2 ]
initial
begin
	c[2] = 1'b1;
	# 30000;
	repeat(4)
	begin
		c[2] = 1'b0;
		c[2] = #30000 1'b1;
		c[2] = #30000 1'b0;
		c[2] = #60000 1'b1;
		c[2] = #30000 1'b0;
		c[2] = #30000 1'b1;
		# 60000;
	end
	c[2] = 1'b0;
end 
// c[ 1 ]
initial
begin
	repeat(8)
	begin
		c[1] = 1'b0;
		c[1] = #60000 1'b1;
		# 60000;
	end
	c[1] = 1'b0;
end 
// c[ 0 ]
initial
begin
	repeat(16)
	begin
		c[0] = 1'b0;
		c[0] = #30000 1'b1;
		# 30000;
	end
	c[0] = 1'b0;
	c[0] = #30000 1'b1;
end 
// d[ 3 ]
initial
begin
	repeat(3)
	begin
		d[3] = 1'b0;
		d[3] = #40000 1'b1;
		# 40000;
	end
	d[3] = 1'b0;
	d[3] = #40000 1'b1;
	# 80000;
	repeat(3)
	begin
		d[3] = 1'b0;
		d[3] = #40000 1'b1;
		# 40000;
	end
	d[3] = 1'b0;
	# 80000;
	repeat(3)
	begin
		d[3] = 1'b1;
		d[3] = #40000 1'b0;
		# 40000;
	end
	d[3] = 1'b1;
end 
// d[ 2 ]
initial
begin
	repeat(3)
	begin
		d[2] = 1'b1;
		d[2] = #160000 1'b0;
		# 160000;
	end
	d[2] = 1'b1;
end 
// d[ 1 ]
initial
begin
	repeat(6)
	begin
		d[1] = 1'b1;
		d[1] = #80000 1'b0;
		# 80000;
	end
	d[1] = 1'b1;
end 
// d[ 0 ]
initial
begin
	repeat(12)
	begin
		d[0] = 1'b1;
		d[0] = #40000 1'b0;
		# 40000;
	end
	d[0] = 1'b1;
end 
endmodule

